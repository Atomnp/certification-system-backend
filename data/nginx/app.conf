# There is only one server in upstream block but there can be many,If we have a single server we can directly include it in the proxy_pass directive. upstream defines a cluster that you can proxy requests to. It's commonly used for defining either a web server cluster for load balancing, or an app server cluster for routing / load balancing.
upstream certification_system_api {
	server app:8000;
}

server {
    listen 80;
    # server_name api.locus.com.np;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
	listen 443 ssl;
	 #server_name api.locus.com.np;
	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/api.locus.com.np/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/api.locus.com.np/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

	# # static site setup
	# root /my-static-site;
	# location / {
    # }

	# reverse proxy setup
	# server_name api.locus.com.np;
	location / {
        # note that we are using upstream name here
		proxy_pass http://app:8000;

		# copied from https://github.com/encode/django-rest-framework/issues/7347
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $http_host;
		proxy_set_header    X-Real-IP           $remote_addr;
		proxy_redirect off;
	}

    # http://mysite/static/abc.jpg will map to /static/abc.jpg
    # if we use root instead of alias http://mysite/static/abc.jpg will map to /static/static/abc.jpg
	location /static/ {
		alias /static/;
	}
}